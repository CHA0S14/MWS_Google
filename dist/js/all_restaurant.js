class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get REVIEW_URL(){return"http://localhost:1337/reviews/?restaurant_id="}static getRestaurantFromApi(e,t){fetch(e).then(e=>e.json()).then(e=>{if(void 0!==DBHelper.db){var n=DBHelper.db.transaction(["restaurants"],"readwrite").objectStore("restaurants");if(Array.isArray(e))for(var r in e){n.put(e[r]).onerror=(()=>{console.log("Couldnt be added")})}else n.put(e).onerror=(()=>{console.log("Couldnt be added")})}t(null,e)}).catch(e=>{t(`Request failed. ${e}`,null)})}static getReviewsFromApi(e,t){fetch(e).then(e=>e.json()).then(e=>{if(void 0!==DBHelper.db2){var n=DBHelper.db2.transaction(["reviews"],"readwrite").objectStore("reviews");if(Array.isArray(e))for(var r in e){delete e[r].id,n.put(e[r]).onerror=(()=>{console.log("Couldnt be added")})}else delete e.id,n.put(e).onerror=(()=>{console.log("Couldnt be added")})}t(null,e)}).catch(e=>{t(`Request failed. ${e}`,null)})}static fetchRestaurantById(e,t){var n=DBHelper.DATABASE_URL+`/${e}`;if(void 0!==DBHelper.db){var r=DBHelper.db.transaction(["restaurants"]).objectStore("restaurants").get(parseInt(e));r.onsuccess=function(e){void 0===r.result?t("No restaurant found",null):t(null,r.result)},r.onerror=function(e){}}DBHelper.getRestaurantFromApi(n,t)}static fetchReviewRestaurantById(e,t){var n=DBHelper.REVIEW_URL+`${e}`;if(void 0!==DBHelper.db2){var r=DBHelper.db2.transaction(["reviews"]).objectStore("reviews").index("restaurant_id").getAll(parseInt(e));r.onsuccess=function(e){if(void 0===r.result)t("No restaurant found",null),DBHelper.getFromApi(n,t);else{var a=r.result;t(null,r.result),DBHelper.getReviewsFromApi(n,(e,n)=>{var o=new Worker("./js/updaterReviewApiWorker.js"),i=[a,n];o.postMessage(i),r.result||t(e,n)})}},r.onerror=function(e){DBHelper.getReviewsFromApi(n,t)}}}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}let restaurant,reviews;var map;const MAX_TEXT_LENGTH=400;function registerSW(){var e;navigator.serviceWorker&&(navigator.serviceWorker.register("sw.js").then(function(e){navigator.serviceWorker.controller&&(e.waiting?updateReady(e.waiting):e.installing?trackInstalling(e.installing):e.addEventListener("updatefound",function(){trackInstalling(e.installing)}))}),navigator.serviceWorker.addEventListener("controllerchange",function(){e||(window.location.reload(),e=!0)}))}window.initMap=(()=>{window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB;window.indexedDB||(window.alert("Su navegador no soporta una versión estable de indexedDB. Tal y como las características no serán validas"),fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))}));let e=window.indexedDB.open("restaurants-json",1);e.onerror=function(e){alert("Why didn't you allow my web app to use IndexedDB?!")},e.onsuccess=function(t){DBHelper.db=e.result,fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))}),DBHelper.db.onerror=function(e){alert("Database error: "+e.target.errorCode)}},e.onupgradeneeded=function(e){var t=e.target.result.createObjectStore("restaurants",{keyPath:"id"});t.createIndex("neighborhood","neighborhood",{unique:!1}),t.createIndex("cuisine_type","cuisine_type",{unique:!1}),t.createIndex("neighborhood-cuisine_type",["neighborhood","cuisine_type"],{unique:!1})};let t=window.indexedDB.open("reviews-json",1);t.onerror=function(e){alert("Why didn't you allow my web app to use IndexedDB?!")},t.onsuccess=function(e){DBHelper.db2=t.result,fetchReviewsFromURL(),DBHelper.db2.onerror=function(e){alert("Database error: "+e.target.errorCode)}},t.onupgradeneeded=function(e){e.target.result.createObjectStore("reviews",{keyPath:["restaurant_id","name","createdAt","updatedAt"]}).createIndex("restaurant_id","restaurant_id",{unique:!1})},document.getElementById("review-form").addEventListener("click",function(e){e.preventDefault();var t=new Worker("./js/postWorker.js"),n=document.getElementsByName("username")[0].value;document.getElementsByName("username")[0].value=null;var r=document.getElementsByName("rating")[0].value;document.getElementsByName("rating")[0].value=null;var a=document.getElementsByName("comment")[0].value;document.getElementsByName("comment")[0].value=null;var o=getParameterByName("id"),i={restaurant_id:parseInt(o),name:n,createdAt:Date.now(),updatedAt:Date.now(),rating:r,comments:a};t.postMessage(i),addReview(i)}),document.getElementById("show-map-link").addEventListener("click",e=>{e.preventDefault(),"Show Map"===e.target.innerHTML?(document.getElementById("map").style.display="block",e.target.innerHTML="Hidde Map"):(document.getElementById("map").style.display="none",e.target.innerHTML="Show Map")})}),addReview=(e=>{(document.getElementById("reviews-list").appendChild(createReviewHTML(e)),void 0!==DBHelper.db2)&&(DBHelper.db2.transaction(["reviews"],"readwrite").objectStore("reviews").put(e).onerror=(()=>{console.log("Couldnt be added")}))}),fetchRestaurantFromURL=(e=>{if(self.restaurant)e(null,self.restaurant);else{var t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}}),fetchReviewsFromURL=(e=>{if(self.review)e(null,self.review);else{var t=getParameterByName("id");t?DBHelper.fetchReviewRestaurantById(t,(e,t)=>{self.reviews=t,t?fillReviewsHTML():console.error(e)}):(error="No restaurant id in URL",e(error,null))}}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),t.alt=e.name+"'s image showing some delicius "+e.cuisine_type+" food coocked in "+e.neighborhood,document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const o=document.createElement("td");o.innerHTML=e[n],r.appendChild(o),t.appendChild(r)}}),fillReviewsHTML=((e=self.reviews)=>{const t=document.getElementById("reviews-container");if(!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const n=document.getElementById("reviews-list");e.forEach(e=>{n.appendChild(createReviewHTML(e))}),t.appendChild(n)}),createReviewHTML=(e=>{const t=document.createElement("li"),n=document.createElement("div");n.setAttribute("class","title-date-div flex-container");const r=document.createElement("p");r.innerHTML=e.name,r.setAttribute("class","review-title"),n.appendChild(r);const a=document.createElement("p");a.innerHTML=new Date(e.updatedAt).toUTCString(),a.setAttribute("class","review-date"),n.appendChild(a),t.appendChild(n);const o=document.createElement("div");o.setAttribute("class","rating-comment-div");const i=document.createElement("p");i.innerHTML=`Rating: ${e.rating}`,i.setAttribute("class","review-rating"),o.appendChild(i);const s=document.createElement("div");if(e.comments.length>400){const t=e.comments.substring(0,400)+"...",n=document.createElement("p");n.setAttribute("class","review-snipet"),n.innerHTML=t,s.appendChild(n)}const l=document.createElement("p");if(l.innerHTML=e.comments,l.setAttribute("class","review-text"),e.comments.length>400&&(l.style.display="none"),s.appendChild(l),e.comments.length>400){const e=document.createElement("button");e.innerHTML="See more...",e.setAttribute("class","display-button"),e.addEventListener("click",function(){"See more..."===this.innerHTML?(this.innerHTML="See less...",this.previousElementSibling.style.display="block",this.previousElementSibling.previousElementSibling.style.display="none"):(this.innerHTML="See more...",this.previousElementSibling.style.display="none",this.previousElementSibling.previousElementSibling.style.display="block")}),s.appendChild(e)}return o.appendChild(s),t.appendChild(o),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}),updateReady=function(e){e.postMessage({action:"skipWaiting"})},trackInstalling=function(e){e.addEventListener("statechange",function(){"installed"==e.state&&updateReady(e)})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
