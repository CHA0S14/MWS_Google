class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get REVIEW_URL(){return"http://localhost:1337/reviews/?restaurant_id="}static fetchRestaurants(e){if(void 0!==DBHelper.db){var t=DBHelper.db.transaction(["restaurants"]).objectStore("restaurants").getAll();t.onsuccess=function(r){var n=t.result;fetch(DBHelper.DATABASE_URL).then(e=>e.json()).then(r=>{var a=new Worker("./js/updaterFavApiWorker.js"),o=[n,r];a.postMessage(o),0===t.result.length&&DBHelper.getFromApi(DBHelper.DATABASE_URL,e),e(null,r)})},t.onerror=function(t){DBHelper.getFromApi(DBHelper.DATABASE_URL,e)}}else DBHelper.getFromApi(DBHelper.DATABASE_URL,e)}static getFromApi(e,t){fetch(e).then(e=>e.json()).then(e=>{if(void 0!==DBHelper.db){var r=DBHelper.db.transaction(["restaurants"],"readwrite").objectStore("restaurants");if(Array.isArray(e))for(var n in e){e[n].is_favorite=e[n].is_favorite+"",r.put(e[n]).onerror=(()=>{console.log("Couldnt be added")})}else e.is_favorite=e.is_favorite+"",r.put(e).onerror=(()=>{console.log("Couldnt be added")})}t(null,e)}).catch(e=>{t(`Request failed. ${e}`,null)})}static fetchRestaurantById(e,t){if(void 0!==DBHelper.db){var r=DBHelper.db.transaction(["restaurants"]).objectStore("restaurants").get(e),n=DBHelper.DATABASE_URL+`/${e}`;r.onsuccess=function(e){void 0===r.result?t("No restaurant found",null):t(null,r.result),DBHelper.getFromApi(n,t)},r.onerror=function(e){DBHelper.getFromApi(n,t)}}else DBHelper.getFromApi(n,t)}static fetchRestaurantByCuisine(e,t){if(void 0!==DBHelper.db){var r=DBHelper.db.transaction(["restaurants"]).objectStore("restaurants").index("cuisine_type").getAll(e);r.onsuccess=function(n){t(null,r.result),DBHelper.getFromApi(DBHelper.DATABASE_URL+`?cuisine_type=${e}`,t)},r.onerror=function(r){DBHelper.getFromApi(DBHelper.DATABASE_URL+`?cuisine_type=${e}`,t)}}else DBHelper.getFromApi(DBHelper.DATABASE_URL+`?cuisine_type=${e}`,t)}static fetchRestaurantByNeighborhood(e,t){if(void 0!==DBHelper.db){var r=DBHelper.db.transaction(["restaurants"]).objectStore("restaurants").index("neighborhood").getAll(e);r.onsuccess=function(n){t(null,r.result),DBHelper.getFromApi(DBHelper.DATABASE_URL+`?neighborhood=${e}`,t)},r.onerror=function(r){DBHelper.getFromApi(DBHelper.DATABASE_URL+`?neighborhood=${e}`,t)}}else DBHelper.getFromApi(DBHelper.DATABASE_URL+`?neighborhood=${e}`,t)}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){if("all"===t&&"all"===e)DBHelper.fetchRestaurants(r);else if("all"!==t&&"all"===e)DBHelper.fetchRestaurantByNeighborhood(t,r);else if("all"===t&&"all"!==e)DBHelper.fetchRestaurantByCuisine(e,r);else if(void 0!==DBHelper.db){var n=DBHelper.db.transaction(["restaurants"]).objectStore("restaurants").index("neighborhood-cuisine_type").getAll([t,e]);n.onsuccess=function(a){r(null,n.result),DBHelper.getFromApi(DBHelper.DATABASE_URL+`?neighborhood=${t}&cuisine_type=${e}`,r)},n.onerror=function(n){r("Error fetching restaurant by cuisine and neighborhood",null),DBHelper.getFromApi(DBHelper.DATABASE_URL+`?neighborhood=${t}&cuisine_type=${e}`,r)}}else DBHelper.getFromApi(DBHelper.DATABASE_URL+`?neighborhood=${t}&cuisine_type=${e}`,r)}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}let restaurants,neighborhoods,cuisines;var map,markers=[];function registerSW(){var e;navigator.serviceWorker&&(navigator.serviceWorker.register("sw.js").then(function(e){navigator.serviceWorker.controller&&(e.waiting?updateReady(e.waiting):e.installing?trackInstalling(e.installing):e.addEventListener("updatefound",function(){trackInstalling(e.installing)}))}),navigator.serviceWorker.addEventListener("controllerchange",function(){e||(window.location.reload(),e=!0)}))}document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1});window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB;window.indexedDB||(window.alert("Su navegador no soporta una versión estable de indexedDB. Tal y como las características no serán validas"),updateRestaurants());let e=window.indexedDB.open("restaurants-json",1);e.onerror=function(e){alert("Why didn't you allow my web app to use IndexedDB?!")},e.onsuccess=function(t){DBHelper.db=e.result,updateRestaurants(),registerSW(),DBHelper.db.onerror=function(e){alert("Database error: "+e.target.errorCode)}},e.onupgradeneeded=function(e){var t=e.target.result.createObjectStore("restaurants",{keyPath:"id"});t.createIndex("neighborhood","neighborhood",{unique:!1}),t.createIndex("cuisine_type","cuisine_type",{unique:!1}),t.createIndex("neighborhood-cuisine_type",["neighborhood","cuisine_type"],{unique:!1})},document.getElementById("show-map-link").addEventListener("click",e=>{e.preventDefault(),"Show Map"===e.target.innerHTML?(document.getElementById("map").style.display="block",e.target.innerHTML="Hidde Map"):(document.getElementById("map").style.display="none",e.target.innerHTML="Show Map")})}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),r=e.selectedIndex,n=t.selectedIndex,a=e[r].value,o=t[n].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(a,o,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),myLazyLoad.update(),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),r=document.createElement("img");r.className="restaurant-img lazy",r.setAttribute("data-src",DBHelper.imageUrlForRestaurant(e)),r.alt=e.name+"'s image",t.append(r);const n=document.createElement("h3");n.innerHTML=e.name,t.append(n);const a=document.createElement("p");a.innerHTML=e.neighborhood,t.append(a);const o=document.createElement("p");o.innerHTML=e.address,t.append(o);const s=document.createElement("a");s.innerHTML="View Details",s.setAttribute("aria-label","Clic to view more information and reviews of "+e.name),s.href=DBHelper.urlForRestaurant(e),t.append(s);const i=document.createElement("a");return i.id=e.id,e.is_favorite&&"false"!==e.is_favorite?i.innerHTML="★":i.innerHTML="☆",i.className="fav",i.href="#",i.addEventListener("click",function(t){t.preventDefault();var r=DBHelper.db.transaction(["restaurants"],"readwrite").objectStore("restaurants"),n=parseInt(i.id);"★"===i.innerHTML?(i.innerHTML="☆",e.is_favorite=!1,r.put(e)):(i.innerHTML="★",e.is_favorite=!0,r.put(e));var a=new Worker("./js/putWorker.js"),o=[n,e.is_favorite];a.postMessage(o)}),n.append(i),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})}),updateReady=function(e){e.postMessage({action:"skipWaiting"})},trackInstalling=function(e){e.addEventListener("statechange",function(){"installed"==e.state&&updateReady(e)})};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
